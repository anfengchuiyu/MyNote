
##-----------------ANR问题---------------------------------------------

Android ANR分析详解
https://www.jianshu.com/p/d19c34e7e9bd

ANR问题分析指北
http://www.voidcn.com/article/p-dfpaosyh-bhh.html





##-----------------Git常用命令--------------------------------------
工作区：我们直接编辑的地方，肉眼可见，直接操作
暂存区：数据暂时存放的区域, git add会把数据添加到此
版本库：存放已经提交的数据，push的时候把这个区的数据push到远程仓库

//查看远程仓库地址
git remote -v

//修改最近一条的commit msg
git commit --amend

//修改最近一条的author
git commit --amend --author="zhe <1161280544@qq.com>"


撤销commit:
git reset HEAD^           //撤销最近的一条，清空暂存区，只保留改动到工作区
git reset --hard HEAD^    //撤销最近的一条，改动都丢弃
git reset --soft HEAD^    //撤销最近的一条，不清空暂存区
git reset [commit_id]     //撤销到某一次提交


git stash save "save message"    //保存到stash
git stash list                   //罗列出所有stash
git stash show                   //默认显示第一个stash
git stash show stash@{1}         //显示第二个

//创建这个commit的patch
git format-patch -1 4e16

//创建这个提交后的所有patch
git format-patch 4e16




##---------------grep搜索命令----------------------------------------------

grep "name" main.log

//多条件搜索 -E
grep "name1|name2" main.log -E

//忽略大小写 -i

//遍历目录下所有文件包括子目录 -r
grep "name" ./ -r

//-E -i -r 组合
grep "name1|name2" ./ -irE




##------------------adb常用命令------------------------------------------------------

//查看当前的Activity
adb shell dumpsys activity activities | grep "mResumedActivity"

//windows下搜索Android logcat日志
adb logcat | findstr "name"

//清空日志缓存
logcat -c


##==================Vim常用命令=========================================

滚动屏幕：
ctrl + b   //向上滚动一屏
ctrl + f   //向下滚动一屏


搜索：
:/搜索内容  //搜索文件的内容
n   //下一个
N   //上一个


复制粘贴：
"+y    //粘贴到系统剪贴板
y      //复制一行
p      //粘贴一行
dd     //删除一行
u      //撤销更改



##------------------位运算-----------------------------------

<<   左移，右边空出的位置补0，其值相当于乘以2

>>   右移，左边空出位置，如果正数则补0，若为负数则补0或1（取决于操作系统），其值相当于除以2


按位与：&
规则：    
1&1=1
1&0=0
0&1=0
0&0=0
总结：有0则0
用途：1.清零
      2.取值，比如X=10101110，取X的低4位，则用X & 00001111 = 00001110即可得到。同理配合位移还可以取其他位置的数。


按位或：|
规则：
1|1=1
1|0=1
0|1=1
0|0=0
总结：有1则1
用途：经常用来对数据的某些位置1。比如对X=10100000的低四位置1，则用X | 00001111 = 10101111即可得到。


按位异或：^
规则：    
0^0=0
0^1=1
1^0=1
1^1=0
总结：两者不同则为1
用途：1.特定位翻转
      2.不引用新变量交换两者的值：a=a^b;  b=a^b;  a=a^b;



如果[不同长度]的数据进行位运算，系统会将二者按[右端对齐]进行运算。






##-------------CmakeLists编写--------------------------------

https://blog.csdn.net/afei__/article/details/81201039


#设置支持的最小版本
cmake_minimum_required(VERSION 3.4.1)

#设置项目名称
project(test_name)

#打印日志
message("test...")

#生成动态库
add_library(demo SHARED main.cpp)

#生成静态库
add_library(demo STATIC main.cpp)

#生成可执行文件
add_executeable(demo main.cpp)

#如果有多个源文件，罗列出每个cpp文件这种方式比较简单
#但是一旦文件多了就不好维护了
add_library(demo SHARED main.cpp test.cpp util.cpp)

#搜索目录下所有的cpp文件，并存储到一个变量中
aux_source_directory(. SRC_LIST)
#使用该变量
add_library(demo ${SRC_LIST})

#使用多个变量
add_library(demo ${SRC_LIST1} ${SRC_LIST2})

#自定义搜索规则
file(GLOB SRC_LIST "*.cpp" "util/*.cpp")

#查找指定的预编译库，并将它的路径存储到变量中
#默认的搜索路径为 cmake 包含的系统库，因此如果是 NDK 的公共库只需要指定库的 name 即可
find_library(libname /aa/b)
find_library(lib-log log)

#设置头文件目录
include_directories(header_folder1 header_folder2)

#设置target的链接库
target_link_libraries(
	demo
	libs/test.so
	libs/ss.a
	${lib-log})



#set直接设置变量的值
set(SRC_LIST main.cpp)


#包含其他cmake文件
include(./commom/cc.cmake)
include(def) //在搜索路径中搜索def.cmake文件
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake) //设置include的搜索路径

#预定义变量
PROJECT_SOURCE_DIR：工程的根目录
PROJECT_BINARY_DIR：运行 cmake 命令的目录，通常是 ${PROJECT_SOURCE_DIR}/build
PROJECT_NAME：返回通过 project 命令定义的项目名称
CMAKE_CURRENT_SOURCE_DIR：当前处理的 CMakeLists.txt 所在的路径
CMAKE_CURRENT_BINARY_DIR：target 编译目录
CMAKE_CURRENT_LIST_DIR：CMakeLists.txt 的完整路径
CMAKE_CURRENT_LIST_LINE：当前所在的行
CMAKE_MODULE_PATH：定义自己的 cmake 模块所在的路径，SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)，然后可以用INCLUDE命令来调用自己的模块
EXECUTABLE_OUTPUT_PATH：重新定义目标二进制可执行文件的存放位置
LIBRARY_OUTPUT_PATH：重新定义目标链接库文件的存放位置

CMAKE_C_FLAGS：设置 C 编译选项，也可以通过指令 add_definitions() 添加
CMAKE_CXX_FLAGS：设置 C++ 编译选项，也可以通过指令 add_definitions() 添加




##-------------------ubuntu nginx安装配置-------------------------------------------------

1.下载
wget -c https://nginx.org/download/nginx-1.12.0.tar.gz


2.安装依赖库

解决依赖包pcre安装，命令：
sudo apt-get install libpcre3 libpcre3-dev

安装zlib：
sudo apt-get install zlib1g-dev

openssl安装：
sudo apt-get install openssl libssl-dev



3.解压，cd进目录，执行进行默认配置
./configure



4.配置rtmp-module
下载源码：https://github.com/arut/nginx-rtmp-module







##----------------Centos7 nginx安装配置---------------------------------------------------


//centos 7 查看IP地址
ip addr


//linux和xshell文件传输
1.先安装lrzsz
yum install lrzsz

2.在xshell上执行
rz        //上传文件到linux
sz [file]   //下载文件到windows


基于nginx的rtmp直播服务器（nginx-rtmp-module实现）
https://www.cnblogs.com/zhangmingda/p/12638985.html


一. gcc 安装
安装 nginx 需要先将官网下载的源码进行编译，编译依赖 gcc 环境，如果没有 gcc 环境，则需要安装：

yum install gcc-c++

二. PCRE pcre-devel 安装
PCRE(Perl Compatible Regular Expressions) 是一个Perl库，包括 perl 兼容的正则表达式库。nginx 的 http 模块使用 pcre 来解析正则表达式，所以需要在 linux 上安装 pcre 库，pcre-devel 是使用 pcre 开发的一个二次开发库。nginx也需要此库。命令：

yum install -y pcre pcre-devel

三. zlib 安装
zlib 库提供了很多种压缩和解压缩的方式， nginx 使用 zlib 对 http 包的内容进行 gzip ，所以需要在 Centos 上安装 zlib 库。

yum install -y zlib zlib-devel

四. OpenSSL 安装
OpenSSL 是一个强大的安全套接字层密码库，囊括主要的密码算法、常用的密钥和证书封装管理功能及 SSL 协议，并提供丰富的应用程序供测试或其它目的使用。
nginx 不仅支持 http 协议，还支持 https（即在ssl协议上传输http），所以需要在 Centos 安装 OpenSSL 库。

yum install -y openssl openssl-devel


官网下载
1.直接下载.tar.gz安装包，地址：https://nginx.org/en/download.html

2.使用wget命令下载（推荐）。确保系统已经安装了wget，如果没有安装，执行 yum install wget 安装。
比如执行：
wget -c https://nginx.org/download/nginx-1.12.0.tar.gz

3.解压
依然是直接命令：

tar -zxvf nginx-1.12.0.tar.gz
cd nginx-1.12.0


4.配置
其实在 nginx-1.12.0 版本中你就不需要去配置相关东西，默认就可以了。当然，如果你要自己配置目录也是可以的。
1.使用默认配置

./configure

5.编译安装
make
make install

6.查找安装路径：

whereis nginx


7.启动、停止nginx
cd /usr/local/nginx/sbin/

/usr/local/nginx/sbin/nginx
/usr/local/nginx/sbin/nginx -s stop
/usr/local/nginx/sbin/nginx -s quit
/usr/local/nginx/sbin/nginx -s reload

./nginx -s quit:此方式停止步骤是待nginx进程处理任务完毕进行停止。
./nginx -s stop:此方式相当于先查出nginx进程id再使用kill命令强制杀掉进程。

查询nginx进程：ps aux|grep nginx

重启 nginx
1.先停止再启动（推荐）：
对 nginx 进行重启相当于先停止再启动，即先执行停止命令再执行启动命令。如下：

./nginx -s quit
./nginx
2.重新加载配置文件：
当 ngin x的配置文件 nginx.conf 修改后，要想让配置生效需要重启 nginx，使用-s reload不用先停止 ngin x再启动 nginx 即可将配置信息在 nginx 中生效，如下：
./nginx -s reload


8.开机自启动
即在rc.local增加启动代码就可以了。

vi /etc/rc.local
增加一行 /usr/local/nginx/sbin/nginx
设置执行权限：

chmod 755 rc.local


##--------------------ByteBuffer---------------------------------------------




##---------------------Camera----------------------------------------------






##---------------------MediaCodec----------------------------------------------







##-------------------EGL初始化-----------------------------------
EGLDisplay：是对实际显示设备的抽象
EGLSurface：是对用来存储图像的内存区域 FrameBuffer 的抽象，包括 Color Buffer（颜色缓冲区）， 
			Stencil Buffer（模板缓冲区） ，Depth Buffer（深度缓冲区）
EGLContext：存储 OpenGL ES 绘图的一些状态信息

使用 EGL 渲染的一般步骤：
1.获取 EGLDisplay 对象，建立与本地窗口系统的连接 调用 eglGetDisplay 方法得到 EGLDisplay

2.初始化 EGL
调用 eglInitialize 方法初始化

3.获取 EGLConfig 对象，确定渲染表面的配置信息 调用 eglChooseConfig 方法得到 EGLConfig。

4.创建渲染表面 EGLSurface
通过 EGLDisplay 和 EGLConfig ，调用 eglCreateWindowSurface 或 eglCreatePbufferSurface 方法创建渲染表面，
得到 EGLSurface，其中 eglCreateWindowSurface 用于创建屏幕上渲染区域，eglCreatePbufferSurface 用于创建屏幕外渲染区域。

5.创建渲染上下文 EGLContext
调用 eglCreateContext 方法创建渲染上下文，得到 EGLContext

6.绑定上下文
通过 eglMakeCurrent 方法将 EGLSurface、EGLContext、EGLDisplay 三者绑定，
绑定成功之后 OpenGLES 环境就创建好了，接下来便可以进行渲染

7.交换缓冲
OpenGLES 绘制结束后，使用 eglSwapBuffers 方法交换前后缓冲，将绘制内容显示到屏幕上，而屏幕外的渲染不需要调用此方法

8.释放 EGL 环境 
 绘制结束后，不再需要使用 EGL 时，需要取消 eglMakeCurrent 的绑定，销毁 EGLDisplay、EGLSurface、EGLContext 三个对象。



字节流动
https://juejin.cn/user/1556564195161725/posts

Android EGL + C/C++ 编写OpenGLES程序
https://www.jianshu.com/p/bf1cec3fdba3

https://github.com/CainKernel/EGLNativeRender/blob/master/app/src/main/cpp/caingles/GlUtils.cpp



##----------------------OpenGL ES 2.0--------------------------------------------------------------------


屏幕坐标：

(-1,1)             (1,1) 
|-------------------|
|                   |
|                   |
|                   |
|                   |
|                   |
|                   |
|                   |
|-------------------|
(-1,-1)            (1,-1)



纹理坐标：

(0,1)             (1,1) 
|-------------------|
|                   |
|                   |
|                   |
|      Texture      |
|                   |
|                   |
|                   |
|-------------------|
(0,0)            (1,0)



在android中，屏幕左上角位0,0坐标



attribute
uniform
关于 uniform 的定义和用法,在 GLSL 语法中已经详细说过了,在这里再简单的讲几点,
一是 uniform 是存在于 VS 和 PS 之中的,区别于 attribute 只存在与 VS 中,
二是 uniform 针对不同的点值是一样的,区别于 attribute 针对每个点可以一样
(比如用 glVertexAttrib*传入的时候),也可以不一样(比如用 glVertexAttribPoint)。






###传递数据到OpenGL(GPU)

-- 创建一个 buffer objec
void glGenBuffers(GLsizei n, GLuint * buffers);

`举例
int[] vboIds = new int[1];
glGenBuffers(1, vboIds);
`


-- 给 buffer object name 创建和关联一个 buffer object,同时,通过这个 API,还将参数 buffer 对应的 buffer object 设置为目前 GPU 所使用的 VBO 或者 IBO
/**
* traget:  VBO:GLES20.GL_ARRAY_BUFFER     IBO:GLES20.GL_ELEMENT_ARRAY_BUFFER 
*/
void glBindBuffer(GLenum target, GLuint buffer);

`举例
glBindBuffer(GLES20.GL_ARRAY_BUFFER, vboIds[0]);
`



-- 创建了 buffer object 之后,就需要给这个 buffer object 赋予数据了,而 glBufferData 这个 API 就是通过 OpenGL ES,把 CPU 端保存的数据传递给 GPU 端, 保存在指定的 buffer object 中。
/**
* size: 数据大小
* data：如果传null,则会分配size大小内存
* usage： GL_STATIC_DRAW(暗示这个 buffer object 只会被赋值一次,然后在 GPU 中可能会多次读取调用)     
		  GL_DYNAMIC_DRAW(暗示这个 buffer object 可能会被赋值多次,且在 GPU 中可能会多次读取调用)
		  GL_STREAM_DRAW(暗示这个 buffer object 只会被赋值一次, 然后在 GPU 中也只会被读取调用少量的几次)
*/
void glBufferData(GLenum target, GLsizeiptr size, const GLvoid * data, GLenum usage);


-- 这个 API 的功能和刚才的 glBufferData 类似,顾名思义,刚才那个 API 是给 buffer object 传入数据,这个 glBufferSubData 是给 buffer object 的一部分传入数据。
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid * data);


-- 当 buffer 不再被需要的时候,则可以通过 glDeleteBuffers 这个 API 把 buffer object name 删除。
void glDeleteBuffers(GLsizei n, const GLuint * buffers);


--  给 attribute 指定 index,也可以说是指定 location
void glBindAttribLocation(GLuint program, GLuint index, const GLchar *name);



-- 获取指定 VS 中某个 attribute 的位置
GLint glGetAttribLocation(GLuint program, const GLchar*name);


-- 在 OpenGL ES 以及 GPU 真正使用这个 attribute 之前,还需要通过 glEnableVertexAttribArray 这个 API,对这个 attribute 进行 enable
void glEnableVertexAttribArray(GLuint index);


-- 当绘制结束之后,就可以把没用了的 attribute 通过 glDisableVertexAttribArray disable , 将指定 program 中 的某个 attribute 的开关关闭
void glDisableVertexAttribArray (GLuint index);


-- 往 attribute 传值
-- 实际的值可能存放在 CPU 中,比如以一个指针或者数据的形式存放着,也有可能存放在 GPU 端,
-- 通过刚才创建并赋值了的 buffer object 保存着。不管存放在哪里,都可以通过这个 API 给 attribute 赋值。
-- 然后被赋值后的 attribute 就代表着若干个顶点的坐标或者颜色等等其他信息。
/**
* size: 每个顶点的变量数     size 只能是 1、2、3、4,也比较容易理解,因为 GLSL 中的变量最大也就是 vec4 和 mat4
* type：用于指定存储的数据的数据类型 
* normalized：传递进来的数据是否需要归一化
* stride: 间隔
* pointer: 假如实际数据保存在 CPU 端, 那么 pointer 就是一个指向实际数据存放位置的指针或者数组地址;
		   如果实际数据保存在 GPU 的 VBO 中,那么 pointer 就传入一个偏移,意思就是从 VBO 的某一位开始,
		   从之后的那些数值读取 stride 或者 size 为一个单元,将 size 个数值为有效数据,顶点数个单元的值作为 attribute 的值。
*/
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid * pointer);




-- 先说这组 API 和刚才那个 API 的区别,刚才那个 API,我们针对三个顶点可以传入三组不同的单元,
-- 导致三个顶点的 attribute 都不同,而使用这组 API,所有顶点的 attribute 都一样了。
-- *包含3部分，首先是一个数字,可以是 1 或者 2 或者 3 或者 4,第二个是个字母,可以有 f, 也可以没有 f,第三个是 v,可以有 v,也可以没有 v。
void glVertexAttrib*(GLuint index, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);



-- 获取 uniform 的 location
GLint glGetUniformLocation(GLuint program, const GLchar *name);



-- 给 uniform 进行赋值
void glUniform*iv(GLint location, GLsizei count, const GLint *value);




-- 设定一种颜色，作为清理绘制buffer所使用的颜色
void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);



-- 这个函数的输入参数为一个mask值，用处是指定绘制buffer中的哪一块被清理，
-- 因为绘制buffer中主要分为三块buffer，color buffer、depth buffer、stencil buffer
void glClear(GLbitfield mask);





-- 通过这个API绘制，会使用到GPU中保存的那些顶点中，从第first个顶点开始，到first+count个顶点结束，
-- 使用count个顶点作为绘制的点
/**
* mode:  GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN
         GL_TRIANGLE_STRIP是把123组成一个三角形，然后324再组成一个三角形，这个三角形与第一个三角形是有一条边是共享的，
		 然后345再组成一个三角形，这个三角形与第二个三角形有一条边是共享的 
		 GL_TRIANGLE_FAN会把123组成一个三角形，134组成第二个三角形，145组成第三个三角形
* first:
* count: 
*/
void glDrawArrays(GLenum mode, GLint first, GLsizei count);




-- 开发者可以通过它指定一些不连续的顶点，所以需要传入一个数组，这个数组保存的就是顶点的index
/**
* count: 用于指定使用多少个顶点作为绘制的点
* type: type必须是GL_UNSIGNED_BYTE或者GL_UNSIGNED_SHORT
* indices: 最后一个参数 indices 非常重要,它分为两种情况,假如实际数据保存在 CPU 端, 
           那么 indices 就是一个指向实际数据存放位置的指针或者数组地址。
		   如果实际数据保存在 GPU 的 IBO 中,那么 indices 就传入一个偏移,
		   意思就是从 IBO 的某一位开始,从之后的那些数值读取 count 个数值作为 indices 的值
*/
void glDrawElements(GLenum mode, GLsizei count, GLenum type, const GLvoid * indices);





相机预览的顶点着色器和片元着色器代码：

attribute vec4 aPosition;
attribute vec4 aTextureCoord;
uniform mat4 uTextureMatrix;
varying vec2 vTextureCoord; //传给片元着色器
void main(){
	vTextureCoord = (uTextureMatrix * aTextureCoord).xy;
	gl_Position = aPosition;
}



#extension GL_OES_EGL_image_external : require
precision mediump float;

uniform samplerExternalOES uTextureSampler;
varying vec2 vTextureCoord;
void main(){
	vec4 vCameraColor = texture2D(uTextureSampler, vTextureCoord);
	gl_FragColor = vCameraColor;
}







