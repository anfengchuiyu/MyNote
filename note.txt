Android ANR分析详解
https://www.jianshu.com/p/d19c34e7e9bd

ANR问题分析指北
http://www.voidcn.com/article/p-dfpaosyh-bhh.html

##-------------CmakeLists编写--------------------------------
https://blog.csdn.net/afei__/article/details/81201039


#设置支持的最小版本
cmake_minimum_required(VERSION 3.4.1)

#设置项目名称
project(test_name)

#打印日志
message("test...")

#生成动态库
add_library(demo SHARED main.cpp)

#生成静态库
add_library(demo STATIC main.cpp)

#生成可执行文件
add_executeable(demo main.cpp)

#如果有多个源文件，罗列出每个cpp文件这种方式比较简单
#但是一旦文件多了就不好维护了
add_library(demo SHARED main.cpp test.cpp util.cpp)

#搜索目录下所有的cpp文件，并存储到一个变量中
aux_source_directory(. SRC_LIST)
#使用该变量
add_library(demo ${SRC_LIST})

#使用多个变量
add_library(demo ${SRC_LIST1} ${SRC_LIST2})

#自定义搜索规则
file(GLOB SRC_LIST "*.cpp" "util/*.cpp")

#查找指定的预编译库，并将它的路径存储到变量中
#默认的搜索路径为 cmake 包含的系统库，因此如果是 NDK 的公共库只需要指定库的 name 即可
find_library(libname /aa/b)
find_library(lib-log log)

#设置头文件目录
include_directories(header_folder1 header_folder2)

#设置target的链接库
target_link_libraries(
	demo
	libs/test.so
	libs/ss.a
	${lib-log})



#set直接设置变量的值
set(SRC_LIST main.cpp)


#包含其他cmake文件
include(./commom/cc.cmake)
include(def) //在搜索路径中搜索def.cmake文件
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cmake) //设置include的搜索路径

#预定义变量
PROJECT_SOURCE_DIR：工程的根目录
PROJECT_BINARY_DIR：运行 cmake 命令的目录，通常是 ${PROJECT_SOURCE_DIR}/build
PROJECT_NAME：返回通过 project 命令定义的项目名称
CMAKE_CURRENT_SOURCE_DIR：当前处理的 CMakeLists.txt 所在的路径
CMAKE_CURRENT_BINARY_DIR：target 编译目录
CMAKE_CURRENT_LIST_DIR：CMakeLists.txt 的完整路径
CMAKE_CURRENT_LIST_LINE：当前所在的行
CMAKE_MODULE_PATH：定义自己的 cmake 模块所在的路径，SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)，然后可以用INCLUDE命令来调用自己的模块
EXECUTABLE_OUTPUT_PATH：重新定义目标二进制可执行文件的存放位置
LIBRARY_OUTPUT_PATH：重新定义目标链接库文件的存放位置

CMAKE_C_FLAGS：设置 C 编译选项，也可以通过指令 add_definitions() 添加
CMAKE_CXX_FLAGS：设置 C++ 编译选项，也可以通过指令 add_definitions() 添加








